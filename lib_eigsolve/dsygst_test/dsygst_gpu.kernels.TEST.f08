! This file was generated by gpufort

!
! Hints:
! Device variables in scope:
!       integer, intent(in)                                   :: itype, n, lda, ldb, nb

!       integer, intent(in)                                   :: itype, n, lda, ldb, nb

!       integer, intent(in)                                   :: itype, n, lda, ldb, nb

!       integer, intent(in)                                   :: itype, n, lda, ldb, nb

!       integer, intent(in)                                   :: itype, n, lda, ldb, nb

!       character, intent(in)                                 :: uplo

!       real(8), parameter                                    :: one = 1.d0, half = 0.5d0

!       real(8), parameter                                    :: one = 1.d0, half = 0.5d0

!       integer                                               :: i, j

!       integer                                               :: i, j

!       integer                                               :: k, kb, istat

!       integer                                               :: k, kb, istat

!       integer                                               :: k, kb, istat
module print_helper
    implicit none
contains
    subroutine print_matrix(A, N)
        integer :: N, i, j
        real(8) :: A(N, N)
        do i = 1, N
            write (*, "(32f6.0)") (A(i, j), j=1, N)
        end do
    end subroutine
end module print_helper

function test_launch_krnl_afb01f_0_auto()
    ! errorCode > 0 implies that the test has failed
    use iso_c_binding
    use hip
    use print_helper
    use dsygst_gpu_kernels
    implicit none
    integer :: test_launch_krnl_afb01f_0_auto
    integer :: errorCode = 1, i, j
    type(c_ptr) :: a_d = c_null_ptr
    ! TODO fix parameters
    ! - Add missing arguments
    ! - Determine size of arrays (typically indicated by 'type(c_ptr)' type)
    ! - Add target where we need a pointer
    integer(c_int) :: sharedMem = 0
    type(c_ptr) :: stream = c_null_ptr
    integer(c_int), parameter :: nb = 3
    integer(c_int) :: kb, k

    double precision, allocatable, target, dimension(:, :) :: a
    integer(c_int), parameter :: N = 32
    integer(c_size_t), parameter :: Nbytes = N*N*8
    ! Allocate host memory
    allocate (a(N, N))
    ! Initialize host array
    do j = 1, N
        do i = 1, N
            if (j < i) then
                a(i, j) = 0
            else
                a(i, j) = i*j
            end if
        end do
    end do
    call print_matrix(a,N)

    ! Allocate array space on the device
    call hipCheck(hipMalloc(a_d, Nbytes))
    ! TODO Copy data to device ! (dest,src,size,direction)
    CALL hipCheck(hipMemcpy(a_d, c_loc(a), Nbytes, hipMemcpyHostToDevice)) !
    ! ... might be more (or less) than two memcopies
    ! TODO run the test
    do k = 1, N,nb
        kb = min(N-k+1, nb)
        CALL launch_krnl_afb01f_0_auto(sharedMem, stream, kb, a_d, k, N) ! Modify sharedMem if other than default 0
        CALL hipCheck(hipDeviceSynchronize())
    end do
    !CALL launch_krnl_afb01f_0_cpu(0, c_null_ptr, sharedMem, stream, kb, a_d, k)

    ! TODO Copy results back to host
    CALL hipCheck(hipMemcpy(c_loc(a), a_d, Nbytes, hipMemcpyDeviceToHost))

    ! ... might be more (or less) than two memcopies
    ! TODO Compare results
    call print_matrix(a, N)
    ! TODO Update error code if the results do not match
    test_launch_krnl_afb01f_0_auto = 0
end function

program test_dsygst_gpu_kernels
    implicit none
    integer :: globalErrorCode = 0, errorCode, fails = 0, tests = 0
    ! declare test functions and return type
    integer :: test_launch_krnl_afb01f_0_auto
    write (*, *) "SUITE test_dsygst_gpu_kernels run ..."
    errorCode = test_launch_krnl_afb01f_0_auto()
    IF (errorCode > 0) THEN
        fails = fails + 1
        write (*, *) "TEST test_launch_krnl_afb01f_0_auto ... FAILURE"
    ELSE
        write (*, *) "TEST test_launch_krnl_afb01f_0_auto ... SUCCESS"
    END IF
    tests = tests + 1
    globalErrorCode = globalErrorCode + errorCode

    IF (globalErrorCode > 0) THEN
        write (*, *) "SUITE test_dsygst_gpu_kernels ... FAILURE passed:", (tests - fails), " failed:", fails, " total:", tests
    ELSE
        write (*, *) "SUITE test_dsygst_gpu_kernels ... SUCCESS passed:", (tests - fails), " failed:", fails, " total:", tests
    END IF
end program test_dsygst_gpu_kernels
